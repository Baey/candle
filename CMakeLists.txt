cmake_minimum_required(VERSION 3.5)

if(NOT DEFINED PLATFORM)
    set(PLATFORM "PC")
    execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE PLATFORM)
    string(REGEX REPLACE "\n$" "" PLATFORM "${PLATFORM}")
    if(NOT DEFINED ARCH)
        set(ARCH "native")
        execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE ARCH)
        string(REGEX REPLACE "\n$" "" ARCH "${ARCH}")
        set(CMAKE_CXX_COMPILER g++)
        set(CMAKE_C_COMPILER gcc)
    endif() 
endif()

if( "${PLATFORM}" STREQUAL "RPI")
    message("Compiling for RPI")
    add_compile_definitions(PLATFORM=1)
    if(NOT DEFINED ARCH)
        message("Compiling for armhf")
        set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)
        set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)
    endif()
else()
    add_compile_definitions(PLATFORM=0)
    message("Compiling for PC")
    if(NOT DEFINED ARCH)
        message("Compiling for native architecture")
        set(CMAKE_CXX_COMPILER g++)
        set(CMAKE_C_COMPILER gcc)
    endif()
endif()

# if architecture is still not defined at this point -> go for native
if(NOT DEFINED ARCH)
    set(ARCH "native")
    execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE ARCH)
    string(REGEX REPLACE "\n$" "" ARCH "${ARCH}")
endif()
# or just pick one based on the argument for cross-compile
if("${ARCH}" STREQUAL "armhf")
    message("Compiling for armhf")
    set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)
    set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)
elseif("${ARCH}" STREQUAL "aarm64")
    message("Compiling for aarm64")
    set(CMAKE_CXX_COMPILER /usr/bin/aarch64-linux-gnu-g++)
    set(CMAKE_C_COMPILER /usr/bin/aarch64-linux-gnu-gcc)
endif()

project(md80)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
add_compile_options(-Wall -Wextra -Wpedantic)

if(DEFINED CANDLE_BUILD_PYTHON)
    set(CANDLE_BUILD_STATIC "TRUE")
    add_subdirectory(Candle)
    add_subdirectory(pyCandle)
else()
    add_subdirectory(Candle)
endif()	


message(STATUS "\nCANDLE_BUILD_STATIC: ${CANDLE_BUILD_STATIC}\nCANDLE_BUILD_PYTHON: ${CANDLE_BUILD_PYTHON}")
